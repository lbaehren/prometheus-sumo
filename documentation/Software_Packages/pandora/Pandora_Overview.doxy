/*!
  \page pandora pandora

  \tableofcontents

  \section refman_pandora_intro Introduction

  [pandora](http://prometheus.uni-koeln.de/pandora/en/about) (The prometheus digital image archive software) is the successor to kleio as the driving force behind the prometheus image archive. It's being developed since late fall of 2006, on top of the [Ruby on Rails](http://rubyonrails.org) framework. pandora is Free Software, released under the terms of the [GNU Affero General Public License](http://www.gnu.org/licenses/#AGPL).

  Related pages:

  \li \subpage pandora_install_devel
  \li \subpage pandora_install_production
  \li \subpage database
  \li \subpage pandora_deployment
  \li \subpage coding_guidelines

  \section refman_pandora_checkout Getting the source code

  The source code of _pandora_ is hosted in a central
  [Subversion](http://subversion.apache.org) repository at

  \li http://prometheus-srv.uni-koeln.de/svn/pandora

  \subsection refman_pandora_checkout_svn ... using Subversion

  Checking out a full working copy from the Subversion repository

  \verbatim
  svn co http://prometheus-srv.uni-koeln.de/svn/pandora pandora
  \endverbatim

  will create a directory structure like this:

  \verbatim
  pandora
  |
  |-- branches
  |   |-- 0.1-stable
  |   |-- 0.2-stable
  |   |-- 0.3-stable
  |   |-- 0.4-stable
  |   |-- 0.5-stable
  |   |-- 0.6-stable
  |   `-- restructuring_models_search_and_everything
  |-- tags
  |   |-- 0.1.0
  |   |-- 0.1.1
  |   |-- 0.1.2
  |   |-- ...
  |   `-- 0.6.5
  `-- trunk
      |-- app
      |-- config
      |-- db
      |-- doc
      |-- index
      |-- ...
  \endverbatim

  \subsection refman_pandora_checkout_git ... using Git

  If at a later point in time you want to be able to create new (release) branches
  and tags then accordingly, you will have to clone from the top-level of the
  Subversion repository, telling [Git](http://git-scm.com) import from a standard
  directory layout:

  \verbatim
  git svn clone -s http://prometheus-srv.uni-koeln.de/svn/pandora pandora
  \endverbatim

  The resulting directory structure will look something like this:

  \verbatim
    pandora/.git
    |-- hooks
    |-- info
    |-- logs
    |   `-- refs
    |       |-- heads
    |       `-- remotes
    |           `-- tags
    |-- objects
    |-- refs
    |   |-- heads
    |   |-- remotes
    |   |   `-- tags
    |   `-- tags
    `-- svn
        `-- refs
            `-- remotes
                |-- 0.1-stable
                |-- 0.2-stable
                |-- 0.3-stable
                |-- 0.4-stable
                |-- 0.5-stable
                |-- 0.6-stable
                |-- git-svn
                |-- restructuring_models_search_and_everything
                |-- tags
                |   |-- 0.1.0
                |   |-- 0.1.1
                |   |-- 0.1.2
                |   |...
                |   `-- 0.6.5
                `-- trunk
  \endverbatim

  \subsection pandora_checkout_structure Organization of the source code

  While we already described the overall directory structure created on disk
  when checking out a working copy from the Subversion repository, this section
  provides a summary of the directory structure of the software package itself.

  \verbatim
  pandora
  |-- app                          ...  Source files of the Rails application
  |   |-- controllers
  |   |-- helpers
  |   |-- models                   ...  Information data of the application
  |   `-- views                    ...  The user interface of the application
  |-- config
  |-- db
  |-- doc
  |-- index
  |-- lib
  |-- log
  |-- public
  |-- script                       ...  Helper scripts
  |-- spec
  |-- test
  |-- tmp                          ...  Temporary files
  `-- vendor
  \endverbatim

  \section refman_pandora_testing Testing

  \subsection refman_pandora_testing_specification Test specifications

  Tests are defined in the ``spec`` sub-directory:

  \verbatim
  pandora
  `-- spec/
      |-- controllers
      |-- fixtures
      |-- helpers
      |-- lib
      |-- models
      |-- shared
      |   `-- matchers
      `-- views
  \endverbatim

  \subsection refman_pandora_testing_run Running the tests

  In order to get a list of all available tests, use the command

  \verbatim
  rake -T spec
  \endverbatim

  The resulting list should contain entries like this:

  \verbatim
  rake spec                         Run all specs in spec directory (excluding plugin specs)
  rake spec:clobber_rcov            Remove rcov products for rcov
  rake spec:controllers             Run the code examples in spec/controllers
  rake spec:db:fixtures:load        Load fixtures (from spec/fixtures) into the current environment's database.
  rake spec:doc                     Print Specdoc for all specs (excluding plugin specs)
  rake spec:helpers                 Run the code examples in spec/helpers
  rake spec:lib                     Run the code examples in spec/lib
  rake spec:models                  Run the code examples in spec/models
  rake spec:plugin_doc              Print Specdoc for all plugin examples
  rake spec:plugins                 Run the code examples in vendor/plugins (except RSpec's own)
  rake spec:plugins:rspec_on_rails  Runs the examples for rspec_on_rails
  rake spec:rcov                    Run all specs in spec directory with RCov (excluding plugin specs)
  rake spec:server:restart          reload spec_server.
  rake spec:server:start            start spec_server.
  rake spec:server:stop             stop spec_server.
  rake spec:views                   Run the code examples in spec/views
  \endverbatim

  Since essentially the specs are groups into Rake tasks, running them is as
  simple as e.g.

  \verbatim
  rake spec:models
  \endverbatim

  If however you want a bit more control over the test carried out, you e.g. can
  utilize the ``SPEC`` option to pass along an individual file with test instructions:

  \verbatim
  rake spec SPEC=spec/models/image_spec.rb
  \endverbatim

  Using ``SPEC_OPTS`` it is possible to pass along options e.g. to influence the
  formatting of the output.

  \verbatim
  rake spec SPEC=spec/controllers/institution_controller_spec.rb SPEC_OPTS="--format nested --color"
  \endverbatim

  which will result in something like this (color missing here though):

  \verbatim
    InstitutionController
      in general
        should redirect to login if user is not logged in
        should redirect to email confirmation if user's email is not already confirmed
        should redirect to license if the current user's license is expired
      handling GET /institution/index
        should redirect to /institution/list if user is allowed
        should redirect to /institution/show if user is not allowed to see the list
      handling GET /institution/show
        should not show the given institution if current user is not allowed (FAILED - 1)
        when allowed
          should successfully render the template
          should show the current user's institution
          should show the given institution
  \endverbatim

  \subsection pandora_testing_trouble Troubleshooting

  \b Problem: Specs fail, because resources have PID 0.

  \li \b Description: In der Datenbank der Test-Umgebung ist \c Resource#pid nicht vom Typ String, wie erwartet, sondern vom Typ Integer.
  \verbatim
  >> Resource.column_by_name(:pid).type
  => :integer
  \endverbatim
  \li \b Solution: The table \a Resources needs to be created anew.
  \verbatim
  rake db:test:setup  # fängt quasi bei "Null" wieder an
  \endverbatim

  \section pandora_import_database Importing a new (external) database

  The import of a new database is channeled through the generation and subsequent
  reading of an XML schema; the latter is either provided directly by the
  maintainer(s) of the external database, or generated from e.g. a SQL dump of the
  original database.

  Models or new sources can be found in

  \verbatim
    pandora
    `-- app/models
            |-- source
            |   |-- amtub.rb
            |   |-- arachne.rb
            |   |-- archgiessen.rb
            |   |..
            |-- source.rb
            `-- xml_source.rb
  \endverbatim

  In order ingest a new database, the following building blocks/information are
  required:

  \subsection pandora_database_xml XML schema for the original data

  \verbatim
    <?xml version="1.0" encoding="UTF-8"?>
    <dataroot>
    <row>
      <bild_nr>G8001</bild_nr>
      <datierung>1783-1786</datierung>
      <gattung>Gartenarchitektur</gattung>
      <inventar_nr>GS 6258</inventar_nr>
      <kuenstler>Jussow, Heinrich Christoph (Zeichner)</kuenstler>
      <objekt>Tempel</objekt>
      <objekt_id>11846</objekt_id>
      <titel>Entwurf zu einem Gartentempel, Aufriß</titel>
    </row>
    <row>
      <bild_nr>G8002</bild_nr>
      <datierung>1783-1786</datierung>
      <gattung>Private Architektur</gattung>
      <inventar_nr>GS 6251</inventar_nr>
      <kuenstler>Jussow, Heinrich Christoph (Zeichner)</kuenstler>
      <objekt>Villa</objekt>
      <objekt_id>11839</objekt_id>
      <titel>Entwurf zu einer Villa, Grund- und Aufriß der Gartenfassade</titel>
    </row>
  \endverbatim

  \subsection pandora_database_model Source model

  Once the XML schema for the new data is available, the information can be
  accessible to \b pandora

  \verbatim
    class Source

      class Kassel < XMLSource::Document

        def self.persist
          %w[bild_nr inventar_nr]
        end

        module Record

          def path
            "#{self/'bild_nr'}.jpg"
          end

          def d_artist
            self/'kuenstler'
          end

          def artists_for_vgbk
            ["#{self/'kuenstler'}".sub(/ \(.*/, '').split(', ').reverse.join(' ')]
          end
  \endverbatim

  \section pandora_references References

  \li [Frequently asked questions](http://prometheus-bildarchiv.de/en/faq)
  \li [Help pages](http://prometheus.uni-koeln.de/pandora/en/help)

*/
