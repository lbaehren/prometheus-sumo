/*!
  \page pandora pandora

  \tableofcontents

  \section refman_pandora_intro Introduction

  [pandora](http://prometheus.uni-koeln.de/pandora/en/about) (The prometheus digital image archive software) is the successor to \kleio (\ref kleio) as the driving force behind the prometheus image archive. It's being developed since late fall of 2006, on top of the \ref refman_rails framework. pandora is Free Software, released under the terms of the [GNU Affero General Public License](http://www.gnu.org/licenses/#AGPL).

  Related pages:

  \li \subpage pandora_checkout
  \li \subpage pandora_install
  \li \subpage database
  \li \ref database_import
  \li \subpage pandora_deployment
  \li \subpage coding_guidelines
  \li \subpage database_import
  \li \subpage database_dumps
  \li \subpage database_suppliers

  \li [Frequently asked questions](http://prometheus-bildarchiv.de/en/faq)
  \li [Help pages](http://prometheus.uni-koeln.de/pandora/en/help)

  \subsection pandora_checkout_structure Organization of the source code

  While we already described the overall directory structure created on disk
  when checking out a working copy from the Subversion repository, this section
  provides a summary of the directory structure of the software package itself.

  \verbatim
  pandora
  |-- app                          ...  Source files of the Rails application
  |   |-- controllers
  |   |-- helpers
  |   |-- models                   ...  Information data of the application
  |   `-- views                    ...  The user interface of the application
  |-- config
  |-- db
  |-- doc
  |-- index
  |-- lib
  |-- log
  |-- public
  |-- script                       ...  Helper scripts
  |-- spec
  |-- test
  |-- tmp                          ...  Temporary files
  `-- vendor
  \endverbatim

  \section refman_pandora_testing Testing

  \subsection refman_pandora_testing_specification Test specifications

  Tests are defined in the ``spec`` sub-directory:

  \verbatim
  pandora
  `-- spec/
      |-- controllers
      |-- fixtures
      |-- helpers
      |-- lib
      |-- models
      |-- shared
      |   `-- matchers
      `-- views
  \endverbatim

  \subsection refman_pandora_testing_run Running the tests

  In order to get a list of all available tests, use the command

  \verbatim
  rake -T spec
  \endverbatim

  The resulting list should contain entries like this:

  \verbatim
  rake spec                         Run all specs in spec directory (excluding plugin specs)
  rake spec:clobber_rcov            Remove rcov products for rcov
  rake spec:controllers             Run the code examples in spec/controllers
  rake spec:db:fixtures:load        Load fixtures (from spec/fixtures) into the current environment's database.
  rake spec:doc                     Print Specdoc for all specs (excluding plugin specs)
  rake spec:helpers                 Run the code examples in spec/helpers
  rake spec:lib                     Run the code examples in spec/lib
  rake spec:models                  Run the code examples in spec/models
  rake spec:plugin_doc              Print Specdoc for all plugin examples
  rake spec:plugins                 Run the code examples in vendor/plugins (except RSpec's own)
  rake spec:plugins:rspec_on_rails  Runs the examples for rspec_on_rails
  rake spec:rcov                    Run all specs in spec directory with RCov (excluding plugin specs)
  rake spec:server:restart          reload spec_server.
  rake spec:server:start            start spec_server.
  rake spec:server:stop             stop spec_server.
  rake spec:views                   Run the code examples in spec/views
  \endverbatim

  Since essentially the specs are groups into Rake tasks, running them is as
  simple as e.g.

  \verbatim
  rake spec:models
  \endverbatim

  If however you want a bit more control over the test carried out, you e.g. can
  utilize the ``SPEC`` option to pass along an individual file with test instructions:

  \verbatim
  rake spec SPEC=spec/models/image_spec.rb
  \endverbatim

  Using ``SPEC_OPTS`` it is possible to pass along options e.g. to influence the
  formatting of the output.

  \verbatim
  rake spec SPEC=spec/controllers/institution_controller_spec.rb SPEC_OPTS="--format nested --color"
  \endverbatim

  which will result in something like this (color missing here though):

  \verbatim
    InstitutionController
      in general
        should redirect to login if user is not logged in
        should redirect to email confirmation if user's email is not already confirmed
        should redirect to license if the current user's license is expired
      handling GET /institution/index
        should redirect to /institution/list if user is allowed
        should redirect to /institution/show if user is not allowed to see the list
      handling GET /institution/show
        should not show the given institution if current user is not allowed (FAILED - 1)
        when allowed
          should successfully render the template
          should show the current user's institution
          should show the given institution
  \endverbatim

  \subsection pandora_testing_trouble Troubleshooting

  \b Problem: Specs fail, because resources have PID 0.

  \li \b Description: In der Datenbank der Test-Umgebung ist \c Resource#pid nicht vom Typ String, wie erwartet, sondern vom Typ Integer.
  \verbatim
  >> Resource.column_by_name(:pid).type
  => :integer
  \endverbatim
  \li \b Solution: The table \a Resources needs to be created anew.
  \verbatim
  rake db:test:setup  # f√§ngt quasi bei "Null" wieder an
  \endverbatim

  \section pandora_shutdown Shutdown procedure

  \li At prom1: Disable the usage of the application
  \code
  production deploy web:disable
  \endcode

  \li Enable SSI for message in `index.de.html`: Change from
  \code
---
layout: default
changefreq: daily
priority: 1.0
---
<!--NOPANDORA#include virtual="<%=r "inc/nopandora.html.#{page.lang}" %>" -->
\endcode
  to
  \code
---
layout: default
changefreq: daily
priority: 1.0
---
#include virtual="<%=r "inc/nopandora.html.#{page.lang}" %>"
  \endcode

  \li Deactivate cronjobs, not to be active during shutdown period (or before the system
  is back up completely)

  \li Stop the application
  \code
  production deploy:stop
  \endcode

  \li Shut down the individual server machines:
  \code
  shutdown -h now
  \endcode

  \section pandora_startup Startup procedure

  \li Check status of the Mongrel cluster
  \code
  pandora_cluster ps
  \endcode
  If the cluster is not up and running, use:
  \code
  pandora_cluster start
  \endcode

  \li Check NFS imports
  \code
  nfsimports
  \endcode

  \li Change the maintenance message from
  \code
  ---
  layout: default
  changefreq: daily
  priority: 1.0
  ---
  #include virtual="<%=r "inc/nopandora.html.#{page.lang}" %>"
  \endcode
  back to
   \code
  ---
  layout: default
  changefreq: daily
  priority: 1.0
  ---
  <!--NOPANDORA#include virtual="<%=r "inc/nopandora.html.#{page.lang}" %>" -->
\endcode

*/
