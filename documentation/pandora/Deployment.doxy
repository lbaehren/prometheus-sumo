/*!
  \page pandora_deployment Deploying a new release version

  Deploying a new production version of _pandora_ (The prometheus digital image
  archive software) requires the completion of a number of steps, some of them 
  locally through a working copy of the source code, others on the server hosting
  the live versions of the archive software. The steps include

  \li Marking the release version
  \li Creating a tag for the release
  \li Creating a new release on the stable branch
  \li Deploying the stable version on the test system
  \li Deploying the stable version on the production system

  \section pandora_release_commit Commit changes into the trunk

  The very first step before starting the actual deploy procedure

  \verbatim
  $ rake spec
  \endverbatim

  Commit all the changes to be included into the trunk of the Subversion repository:

  \verbatim
  $ svn commit -m "<commit message>"
  \endverbatim

  Review changes since last deploy; in order to get the version number used for the
  last deploy, go to the [About pandora](http://prometheus.uni-koeln.de/pandora/about)
  page on the prometheus website.

  \verbatim
  $ svn log -r 3679:HEAD
  \endverbatim

  \section pandora_release_version Increment version number

  The version number is encoded in the following files, where it must be adjusted
  manually:

  \li \c lib/pandora/version.rb
  \li \c README

  Push the previous changes upstream:

  \verbatim
  $ svn commit -m "lib/pandora/version.rb: v0.6.5 -- Added news-box to sidebar."
  \endverbatim

  Comitting the changes to the server will be acknowledged:

  \verbatim
  Sending        trunk/README
  Sending        trunk/lib/pandora/version.rb
  Transmitting file data ..
  Committed revision 3705.
  \endverbatim

  \section refman_pandora_release_tagging Tagging the release version

  Once the version number has been adjusted, it is time to create a new tagged
  version of the code base:

  \verbatim
  $ svn copy ^/trunk ^/tags/0.6.5 -m "Tagging the pandora 0.6.5 release"  
  \endverbatim

  As of git v1.6.1 the creation of branches in the SVN repository is supported via

  \verbatim
  git svn branch
  \endverbatim

  with the additional options \c -m (Allows to specify the commit message) and
  \c -t (Create a tag by using the tags_subdir instead of the branches_subdir
  specified during git svn init):

  \verbatim
  git svn branch -t -m "Tagging the pandora 0.6.5 release" 0.6.5
  \endverbatim

  \section pandora_release_stable Create stable branch

  In order to propagate the same set of changes, as previously tagged with the new
  version, to a stable branch, we need to merge the changes submitted to the
  ``trunk``; for this change into the directory of the targetted release version

  \verbatim
  cd pandora/branches/0.6-stable
  \endverbatim

  and instruct Subversion to perform the merge:

  \verbatim
  $ svn merge ^/trunk
  \endverbatim

  Which versions exactly have been included in the merge, can be retrieved through

  \verbatim
  $ svn diff --depth=empty
  \endverbatim

  The output from that will look something like:

  \verbatim
  Property changes on: .
  ___________________________________________________________________
  Modified: svn:mergeinfo
     Merged /trunk:r3677-3706
  \endverbatim

  With the above information we now have everything available to commit the new stable
  version:

  \verbatim
  $ svn commit -m "Merged r3677-3706 from trunk. (v0.6.5)"
  \endverbatim

  The commit itself will once more display the list of files which are being pushed
  onto the server:

  \verbatim
  Sending        0.6-stable
  Sending        0.6-stable/README
  ...
  Adding         0.6-stable/public/images/sidebar
  Adding  (bin)  0.6-stable/public/images/sidebar/box_close.gif
  Transmitting file data ...............................................
  Committed revision 3707.
  \endverbatim


  \section pandora_release_trouble Troubleshooting

  There are quite a number of reasons why the deployment process might fail or stop
  along the lines - first point to retrieve diagnostics information should be the
  log messages generated while the deploy is running.

  <dl>

    <dt>Unable to run \c pandora_cluster executable.</dt>
    <dd>
    Most likely the ``bin`` directory of the prometheus installation is not in your path:
    \verbatim
    $ export PATH=$PATH:/var/local/prometheus/bin
    \endverbatim
    </dd>

    <dt>No documentation generated.</dt>
    <dd>
    Part of the deployment process is the generation of the documentation; if this
    step fails, the new version will not be activated. One of the possible causes
    might be that the user trying to deploy the new version does not have sufficient
    accss permissions to the files and directories which need to be touched in the 
    process - ideally this aspects should be covered by the Rake and Capistrano
    scripts. In order to investigate (and possibly mitigate) this problem, you
    will have to log onto the server, in order to have a closer look at the 
    files and directories in question.
    </dd>
  </dl>




*/