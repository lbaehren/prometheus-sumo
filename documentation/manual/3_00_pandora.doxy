/*!
  \page manual_pandora pandora

  \tableofcontents

  \section refman_pandora_intro Introduction

  [pandora](http://prometheus.uni-koeln.de/pandora/en/about) (The prometheus digital image archive software) is the successor to kleio as the driving force behind the prometheus image archive. It's being developed since late fall of 2006, on top of the [Ruby on Rails](http://rubyonrails.org) framework. pandora is Free Software, released under the terms of the [GNU Affero General Public License](http://www.gnu.org/licenses/#AGPL).


  \section refman_pandora_architecture Architectural Fundamentals


  \section refman_pandora_checkout Checking out the source code

  The source code of _pandora_ is hosted in a central 
  [Subversion](http://subversion.apache.org) repository at

  \li http://prometheus-srv.uni-koeln.de/svn/pandora

  \subsection refman_pandora_checkout_svn ... using Subversion

  Checking out a full working copy from the Subversion repository

  \verbatim
  svn co http://prometheus-srv.uni-koeln.de/svn/pandora pandora
  \endverbatim

  will create a directory structure like this:

  \verbatim
    pandora
    |
    |-- branches
    |   |-- 0.1-stable
    |   |-- 0.2-stable
    |   |-- 0.3-stable
    |   |-- 0.4-stable
    |   |-- 0.5-stable
    |   |-- 0.6-stable
    |   `-- restructuring_models_search_and_everything
    |-- tags
    |   |-- 0.1.0
    |   |-- 0.1.1
    |   |-- 0.1.2
    |   |-- ...
    |   `-- 0.6.5
    `-- trunk
        |-- app
        |-- config
        |-- db
        |-- doc
        |-- index
        |-- ...
  \endverbatim

  \subsection refman_pandora_checkout_git ... using Git

  If at a later point in time you want to be able to create new (release) branches
  and tags then accordingly, you will have to clone from the top-level of the 
  Subversion repository, telling [Git](http://git-scm.com) import from a standard
  directory layout: 

  \verbatim
  git svn clone -s http://prometheus-srv.uni-koeln.de/svn/pandora pandora
  \endverbatim

  The resulting directory structure will look something like this:

  \verbatim
    pandora/.git
    |-- hooks
    |-- info
    |-- logs
    |   `-- refs
    |       |-- heads
    |       `-- remotes
    |           `-- tags
    |-- objects
    |-- refs
    |   |-- heads
    |   |-- remotes
    |   |   `-- tags
    |   `-- tags
    `-- svn
        `-- refs
            `-- remotes
                |-- 0.1-stable
                |-- 0.2-stable
                |-- 0.3-stable
                |-- 0.4-stable
                |-- 0.5-stable
                |-- 0.6-stable
                |-- git-svn
                |-- restructuring_models_search_and_everything
                |-- tags
                |   |-- 0.1.0
                |   |-- 0.1.1
                |   |-- 0.1.2
                |   |...
                |   `-- 0.6.5
                `-- trunk
  \endverbatim

  \section refman_pandora_install_devel Installation of a development system

  The installation/configuration of a new development system/environment entails
  a number of steps:

  \li Install required system packages
  \li Install Ruby gems
  \li Check out working copy of the source code
  \li Start up pandora

  The sections below explain in further detail what needs do be done at each of the
  steps along the way. If you are more interesting in learning about
  \ref refman_pandora_testing, please skip to the section below.


  \section refman_pandora_install_production Installation of a production system

  \verbatim
  /var/local/prometheus
  |-- app/pandora
  |   |-- current -> ../releases/20120416143435        ...  Pointer to the current version
  |   |-- data
  |   |   `-- change_pids
  |   |-- log                                          ...  Releases
  |   |-- releases
  |   |   |-- 20120323220813
  |   |   `-- 20120416143435
  |   |-- shared
  |   |   |-- codes
  |   |   |-- config
  |   |   |-- doc
  |   |   |-- index                                    ... Search index
  |   |   |   `-- production
  |   |   |       |-- 0_11_8
  |   |   |       |   |-- image
  |   |   |       |   |   |-- 1334932732
  |   |   |       |   |   |-- 1336407501
  |   |   |       |   |   `-- 1336491043
  |   |   |       |   `-- resource
  |   |   |       |       |-- 1327917072
  |   |   |       |       |-- 1330708669
  |   |   |       |       `-- 1331304781
  |   |   |       `-- 0_11_8_1 -> 0_11_8
  |   |   |-- log -> /var/log/prometheus
  |   |   |-- pids
  |   |   `-- system
  |   `-- stats
  `-- data
        |-- images
        `-- pandora -> ../app/pandora/data
  \endverbatim

  \section refman_pandora_testing Testing

  \subsection refman_pandora_testing_specification Test specifications

  Tests are defined in the ``spec`` sub-directory:

  \verbatim
  pandora
  `-- spec/
      |-- controllers
      |-- fixtures
      |-- helpers
      |-- lib
      |-- models
      |-- shared
      |   `-- matchers
      `-- views
  \endverbatim

  \subsection refman_pandora_testing_run Running the tests

  In order to get a list of all available tests, use the command

  \code
  rake -T spec
  \endcode

  The resulting list should contain entries like this:

  \verbatim
  rake spec                         Run all specs in spec directory (excluding plugin specs)
  rake spec:clobber_rcov            Remove rcov products for rcov
  rake spec:controllers             Run the code examples in spec/controllers
  rake spec:db:fixtures:load        Load fixtures (from spec/fixtures) into the current environment's database.
  rake spec:doc                     Print Specdoc for all specs (excluding plugin specs)
  rake spec:helpers                 Run the code examples in spec/helpers
  rake spec:lib                     Run the code examples in spec/lib
  rake spec:models                  Run the code examples in spec/models
  rake spec:plugin_doc              Print Specdoc for all plugin examples
  rake spec:plugins                 Run the code examples in vendor/plugins (except RSpec's own)
  rake spec:plugins:rspec_on_rails  Runs the examples for rspec_on_rails
  rake spec:rcov                    Run all specs in spec directory with RCov (excluding plugin specs)
  rake spec:server:restart          reload spec_server.
  rake spec:server:start            start spec_server.
  rake spec:server:stop             stop spec_server.
  rake spec:views                   Run the code examples in spec/views
  \endverbatim

  Since essentially the specs are groups into Rake tasks, running them is as
  simple as e.g. 

  \code
  rake spec:models
  \endcode

  If however you want a bit more control over the test carried out, you e.g. can
  utilize the ``SPEC`` option to pass along an individual file with test instructions:

  \code
  rake spec SPEC=spec/models/image_spec.rb
  \endcode

  Using ``SPEC_OPTS`` it is possible to pass along options e.g. to influence the
  formatting of the output.

  \code
  rake spec SPEC=spec/controllers/institution_controller_spec.rb SPEC_OPTS="--format nested --color"
  \endcode

  which will result in something like this (color missing here though):

  \verbatim
    InstitutionController
      in general
        should redirect to login if user is not logged in
        should redirect to email confirmation if user's email is not already confirmed
        should redirect to license if the current user's license is expired
      handling GET /institution/index
        should redirect to /institution/list if user is allowed
        should redirect to /institution/show if user is not allowed to see the list
      handling GET /institution/show
        should not show the given institution if current user is not allowed (FAILED - 1)
        when allowed
          should successfully render the template
          should show the current user's institution
          should show the given institution
  \endverbatim

  \section refman_pandora_release Deploying a new release version

  \subsection refman_pandora_release_tagging Tagging the release version

  Once the version number has been adjusted, it is time to create a new tagged
  version of the code base:

  \verbatim
  $ svn copy ^/trunk ^/tags/0.6.5 -m "Tagging the pandora 0.6.5 release"  
  \endverbatim

  As of git v1.6.1 the creation of branches in the SVN repository is supported via

  \verbatim
  git svn branch
  \endverbatim

  with the additional options \c -m (Allows to specify the commit message) and
  \c -t (Create a tag by using the tags_subdir instead of the branches_subdir
  specified during git svn init):

  \verbatim
  git svn branch -t -m "Tagging the pandora 0.6.5 release" 0.6.5
  \endverbatim

*/